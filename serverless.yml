service: notes-api
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: ap-southeast-2

functions:
  authorizer:
    handler: authorizer.handler

  createNote:
    handler: handler.createNote # This name is taken from handler.js
    environment:
      NOTES_TABLE_NAME: !Ref notesTable # !Ref is getting name of the table from Resources: TableName: notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 # Keep Lambda connection alive to reduce lagg
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn # GetAtt is getting attriby of all table from CloudFormation after line 44
    events:
      - http:
          method: post
          path: notes
          authorizer: authorizer

  updateNote:
    handler: handler.updateNote # This name is taken from handler.js
    environment:
      NOTES_TABLE_NAME: !Ref notesTable # !Ref is getting name of the table from Resources: TableName: notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 # Keep Lambda connection alive to reduce lagg
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notesTable.Arn # GetAtt is getting cloudFormation attribute of the table ( last lines have more info )
    events:
      - http:
          method: put
          path: notes/{id}
          authorizer: authorizer

  deleteNote:
    handler: handler.deleteNote # This name is taken from handler.js
    environment:
      NOTES_TABLE_NAME: !Ref notesTable # !Ref is getting name of the table from Resources: TableName: notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 # Keep Lambda connection alive to reduce lagg
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notesTable.Arn # GetAtt is getting cloudFormation attribute of the table ( last lines have more info )
    events:
      - http:
          method: delete
          path: notes/{id}
          authorizer: authorizer

  getAllNotes:
    handler: handler.getAllNotes # This name is taken from handler.js
    environment:
      NOTES_TABLE_NAME: !Ref notesTable # !Ref is getting name of the table from Resources: TableName: notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 # Keep Lambda connection alive to reduce lagg
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan # This will allow to get all items into table
        Resource: !GetAtt notesTable.Arn # GetAtt is getting cloudFormation attribute of the table ( last lines have more info )
    events:
      - http:
          method: get
          path: notes
          authorizer:
            name: userpool_autoriser
            arn: arn:aws:cognito-idp:ap-southeast-2:578982365571:userpool/ap-southeast-2_EExi0IXBz

plugins:
  - serverless-iam-roles-per-function # Plugin to identity-based policy allows the dynamodb:PutItem action

# you can add CloudFormation resource templates here
resources:
  Resources:
    notesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: notes
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: notesId
            AttributeType: S
        KeySchema:
          - AttributeName: notesId
            KeyType: HASH
