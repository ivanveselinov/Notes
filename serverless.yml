service: notes-api
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: ap-southeast-2

functions:
  createNote:
    handler: handler.createNote # This name is taken from handler.js
    environment:
      NOTES_TABLE_NAME: !Ref notesTable # !Ref is getting name of the table from Resources: TableName: notesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn # GetAtt is getting attriby of all table from CloudFormation after line 44
    events:
      - http:
          method: post
          path: notes

  updateNote:
    handler: handler.updateNote # This name is taken from handler.js
    environment:
      NOTES_TABLE_NAME: !Ref notesTable # !Ref is getting name of the table from Resources: TableName: notesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notesTable.Arn # GetAtt is getting cloudFormation attribute of the table ( last lines have more info )
    events:
      - http:
          method: put
          path: notes/{id}

  deleteNote:
    handler: handler.deleteNote # This name is taken from handler.js
    environment:
      NOTES_TABLE_NAME: !Ref notesTable # !Ref is getting name of the table from Resources: TableName: notesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notesTable.Arn # GetAtt is getting cloudFormation attribute of the table ( last lines have more info )
    events:
      - http:
          method: delete
          path: notes/{id}

  # getAllNotes:
  #   handler: handler.getAllNotes # This name is taken from handler.js
  #   environment:
  #     NOTES_TABLE_NAME: !Ref notesTable # !Ref is getting name of the table from Resources: TableName: notesTable
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:Scan # This will allow to get all items into table
  #       Resource: !GetAtt notesTable.Arn # GetAtt is getting cloudFormation attribute of the table ( last lines have more info )
  #   events:
  #     - http:
  #         method: get
  #         path: notes

plugins:
  - serverless-iam-roles-per-function # Plugin to identity-based policy allows the dynamodb:PutItem action

# you can add CloudFormation resource templates here
resources:
  Resources:
    notesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: notes
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: notesId
            AttributeType: S
        KeySchema:
          - AttributeName: notesId
            KeyType: HASH
